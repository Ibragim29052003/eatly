class Slider {

  selectors = {
    root: '[data-js-hero-alt-slider]',
    slide: '[data-js-hero-alt-slide]',
    line: '[data-js-hero-alt-slider-line]',
  }

  stateClasses = {
    isActive: 'is-active',
    isNext: 'is-next',
    isPrev: 'is-prev',
  }

  constructor() {
    this.rootElement = document.querySelector(this.selectors.root)
    if (!this.rootElement) {return}
    this.slideElements = this.rootElement.querySelectorAll(this.selectors.slide)
    this.lineElements = this.rootElement.querySelectorAll(this.selectors.line)
    this.currentIndex = 0
    this.interval = null
    this.delay = 3000
    this.isDragging = false
    this.startX = 0
    this.currentX = 0
    this.dragThreshold = 50 // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞

    this.init()
  }

  init() {
    // –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    this.start()

    // –∫–ª–∏–∫–∏ –ø–æ –ª–∏–Ω–∏—è–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.lineElements.forEach(line => {
      line.addEventListener('click', (event) => {
        this.goToSlide(parseInt(event.target.dataset.slide))
      })
    })

    this.rootElement.addEventListener('mousedown', this.handleMouseDown.bind(this))
    this.rootElement.addEventListener('mousemove', this.handleMouseMove.bind(this))
    this.rootElement.addEventListener('mouseup', this.handleMouseUp.bind(this))
    this.rootElement.addEventListener('mouseleave', this.handleMouseUp.bind(this))

    // –º–æ–±–∏–ª–∫–∞
    this.rootElement.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true })
    // passive: false // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ú–û–ñ–ï–¢ –≤—ã–∑–≤–∞—Ç—å event.preventDefault()
    this.rootElement.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false })
    this.rootElement.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true })

    // –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ - –ø–∞—É–∑–∞

    this.rootElement.addEventListener('mouseenter', () => this.pause())
    this.rootElement.addEventListener('mouseleave', () => !this.isDragging && this.resume())
  }

  // —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∞–π–¥–∞–º–∏
  showSlide(index) {
    // –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Ö–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if (index < 0) {
      index = this.slideElements.length - 1
    }
    if (index >= this.slideElements.length) {
      index = 0
    }

    // —Å–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤ —É –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤
    this.slideElements.forEach((slide, i) => {
      slide.classList.remove(
        this.stateClasses.isActive,
        this.stateClasses.isNext,
        this.stateClasses.isPrev
      )

      // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
      if (i === index) {
        slide.classList.add(this.stateClasses.isActive)
      } else if (i < index) {
        slide.classList.add(this.stateClasses.isNext)
      } else {
        slide.classList.add(this.stateClasses.isPrev)
      }
    })

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏–Ω–∏–∏
    this.lineElements.forEach((line) => {
      line.classList.remove(this.stateClasses.isActive)
    })
    // lineElements[index] - –¥–æ—Å—Ç–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞ üëÄ
    this.lineElements[index].classList.add(this.stateClasses.isActive)

    this.currentIndex = index
  }

  nextSlide() {
    this.showSlide(this.currentIndex + 1)
  }

  prevSlide() {
    this.showSlide(this.currentIndex - 1)
  }

  // –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª–∞–π–¥—É
  goToSlide(index) {
    this.showSlide(index)
  }

  start() {
    this.interval = setInterval(() => {
      this.nextSlide()
    }, this.delay)
  }

  pause() {
    clearInterval(this.interval)
  }

  resume() {
    if(!this.interval) {
      this.start()
    }
  }

  // —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ (–ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏)
  resetTimer() {
    this.pause()
    this.start()
  }

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
  handleMouseDown(e) {
    this.isDragging = true
    this.startX = e.clientX
    this.currentX = this.startX
    this.pause()
    this.rootElement.style.cursor = 'grabbing'
  }

  handleMouseMove(e) {
    if(!this.isDragging) {return}
    this.currentX = e.clientX
  }

  handleMouseUp() {
    if(!this.isDragging) {return}
    this.isDragging = false;
    this.rootElement.style.cursor = 'grab'

    // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const diff = this.startX - this.currentX
    if (Math.abs(diff) > this.dragThreshold) {
      diff > 0 ? this.nextSlide() : this.prevSlide()
    }
    this.resetTimer()
  }

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å–∞–Ω–∏–π
  handleTouchStart(e) {
    this.isDragging = true
    // e.touches - –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –∫–∞—Å–∞–Ω–∏—è (–¥–ª—è –º—É–ª—å—Ç–∏—Ç–∞—á–∞).
    // e.touches[0] - –ø–µ—Ä–≤–æ–µ (–æ—Å–Ω–æ–≤–Ω–æ–µ) –∫–∞—Å–∞–Ω–∏–µ
    this.startX = e.touches[0].clientX
    this.currentX = this.startX
    this.pause()
  }

  handleTouchMove(e) {
    if (!this.isDragging) {return}
    this.currentX = e.touches[0].clientX

    // –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Å–≤–∞–π–ø–µ
    // (10 –ø–∏–∫—Å–µ–ª–µ–π), —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å —Å–≤–∞–π–ø –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥—Ä–æ–∂–∞–Ω–∏—è –ø–∞–ª—å—Ü–∞.
    if (Math.abs(this.startX - this.currentX) > 10) {
      e.preventDefault()
    }
  }

  handleTouchEnd() {
    if (!this.isDragging) {return}
    this.isDragging = false

    // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–∞–π–ø–∞
    const diff = this.startX - this.currentX
    if (Math.abs(diff) > this.dragThreshold) {
      diff > 0 ? this.nextSlide() : this.prevSlide()
    }
    this.resetTimer()
  }

}

export default Slider